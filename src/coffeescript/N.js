// Generated by CoffeeScript 2.4.1
(function() {
  /*
  N - Number Functions					*** PROJECT AGNOSTIC ***

  WHAT: Node module

  DESCRIPTION

  FEATURES
  -

  NOTES
  -

  TODOs
  -

  KNOWN BUGS:
  -
  */
  var WORD, trace;

  trace = require('./trace');

  WORD = function(n) {
    var C;
    if (n === null) {
      return "";
    } else if (n < 11) {
      C = require('./C');
      return C.A_NUMBERS_ENGLISH[n];
    } else {
      return R.V.COMMAIZE(n);
    }
  };

  module.exports = {
    //	ASCIIHEX: (n) ->
    //#if n <= -3 or n >= 18
    //#	throw n
    //		if n > 15
    //			C.A_I_TO_LC_ASCII_HEX[15]
    //		else if n < 0
    //			C.A_I_TO_LC_ASCII_HEX[0]
    //		else
    //			C.A_I_TO_LC_ASCII_HEX[Math.round n]
    CONSTRAIN: function(min, n, max) {
      return Math.max(min, Math.min(n, max));
    },
    GUIDNew: function() { // uuidv4
      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        var r, v;
        r = Math.random() * 16 | 0;
        v = c === 'x' ? r : r & 0x3 | 0x8;
        return v.toString(16);
      });
    },
    PLURAL: function(n) {
      if (n === 0 || n >= 2) {
        return "s";
      } else {
        return "";
      }
    },
    ROUND: function(f, decCnt) {
      return Math.round(f * Math.pow(10, decCnt)) / Math.pow(10, decCnt); //SO: 16319855
    },
    
    // N.RND -> 0,1
    // N.RND y -> 0-(y-1)
    // N.RND x,y -> x-y
    RND: function(min = 1, max) {
      if (!max) {
        max = min;
        min = 0;
      }
      return Math.floor(Math.random() * (max - min + 1) + min);
    },
    SIGN: function(n) {
      if (isNaN(n)) {
        return NAN;
      } else if (n === 0) {
        return 0;
      } else if (n > 0) {
        return 1;
      } else {
        return -1;
      }
    },
    PERIOD: function(n) {
      var i, j, ref, s;
      if (n > 0) {
        s = "";
        for (j = i = 1, ref = n; (1 <= ref ? i <= ref : i >= ref); j = 1 <= ref ? ++i : --i) {
          s += ".";
        }
        return s;
      } else {
        R.AT(n === 0);
        return "";
      }
    },
    WORD: WORD,
    ZEROPAD: function(n, len) {
      return ("000000000" + n).slice(-len);
    },
    //if ut
    s_ut: function() {
      var N_UT, UT;
      UT = require('./ut');
      return (new (N_UT = class N_UT extends UT {
        run() {
          return this.t("WORD", function(ut) {
            //					@log "WORD: #{WORD 5}"
            return this.eq(WORD(5), "five");
          });
        }

      })).run();
    }
  };

  //endif

}).call(this);
