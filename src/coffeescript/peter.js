// coffeescript.js: Generated by CoffeeScript GITLAB/lib 2.3.0
var log, printWarn, process, trace;

trace = require('./trace');

log = function(line) {
  return process.stdout.write(line + '\n');
};

printWarn = function(line) {
  return process.stderr.write(line + '\n');
};

process = function(code, ENV) {
  var _, a, arg, bGo, i, j, k, last, len, line, lines, o, req, stack;
  log("process");
  code = code.toString();
  log(`FILE: SRC1: ${code}\n`);
  a = [];
  req = {}; //required
  stack = [];
  arg = function(line) {
    return log("arg");
  };
  lines = code.split('\n');
  for (i = j = 0, len = lines.length; j < len; i = ++j) {
    line = lines[i];
    line = line.replace(/Charles/, 'Christmas');
    switch (false) {
      case line.slice(0, 3) !== "#if":
        log(line);
        o = {};
        o[last = arg(line)] = true;
        stack.push(o);
        compute();
        break;
      case line.slice(0, 5) !== "#else":
        log(line);
        stack[stack.length - 1][last] ^= true;
        compute();
        break;
      case line.slice(0, 6) !== "#endif":
        log(line);
        compute();
        break;
      default:
        if (CNT_OWN(req) === 0) {
          // nothing required!
          a.push(line);
        } else {
          // make sure all requirements satisfied
          bGo = true;
          for (k in req) {
            if (req[k]) {
              bGo &= cur[k];
            }
          }
          if (bGo) {
            a.push(line);
          }
        }
    }
  }
  //		lines[i] = line
  //		log "LINE: #{line}"
  _ = a.join('\n');
  log(`AFTER: ${_}\n`);
  return _;
};

module.exports = {
  //if ut
  s_ut: function() {
    var PeterUT, UT;
    UT = require('./UT');
    return (new (PeterUT = class PeterUT extends UT {
      run() {
        return this.t("process", function(ut) {});
      }

    })).run();
  },
  //endif
  process: process
};
